    def find_similar_test_cases(self, threshold=0.9):
        similar_cases = {}
        for i, test_case_id in enumerate(self.cosine_similarity_df.index):
            similar = self.cosine_similarity_df[test_case_id][
                self.cosine_similarity_df[test_case_id] >= threshold].index.tolist()
            similar = [tc for tc in similar if tc != test_case_id]
            if similar:
                similar_cases[test_case_id] = similar

        optimized_cases = []
        similar_groups = []
        processed = set()

        for key, similar in similar_cases.items():
            if key not in processed:
                group = [key] + similar
                similar_groups.append(group)
                processed.update(group)
                max_steps_case = max(group, key=lambda x: len(
                    self.df[self.df['Id'] == x]['Test Step Description'].values[0].split()))
                optimized_cases.append(max_steps_case)

        unique_cases = set(self.df['Id']) - processed
        optimized_cases.extend(unique_cases)

        self.total_cases = len(self.df['Id'])
        self.optimized_cases = optimized_cases




GPT generated unique test cases function
class TestCaseSimilarity:
    def __init__(self, file_path):
        self.df = pd.read_excel(file_path)

    def calculate_similarity(self):
        # Load model and calculate embeddings
        model = SentenceTransformer('C:\\Users\\lullalo\\.cache\\huggingface\\hub\\all-MiniLM-L6-v2-main')
        # Convert the 'Test Step Description' column to strings
        self.df['Test Step Description'] = self.df['Test Step Description'].astype(str)
        # Calculate embeddings
        embeddings = model.encode(self.df['Test Step Description'])

        # Calculate the cosine similarity between each pair of test cases
        self.cosine_similarity_matrix = cosine_similarity(embeddings)
        # Create a DataFrame for the cosine similarity matrix
        self.cosine_similarity_df = pd.DataFrame(
            self.cosine_similarity_matrix,
            index=self.df['Id'],
            columns=self.df['Id']
        )

    def find_similar_test_cases(self, threshold=0.9):
        similar_cases = {}
        for i, test_case_id in enumerate(self.cosine_similarity_df.index):
            similar = self.cosine_similarity_df[test_case_id][
                self.cosine_similarity_df[test_case_id] >= threshold].index.tolist()
            similar = [tc for tc in similar if tc != test_case_id]
            if similar:
                similar_cases[test_case_id] = similar

        optimized_cases = []
        similar_groups = []
        processed = set()

        for key, similar in similar_cases.items():
            if key not in processed:
                group = [key] + similar
                similar_groups.append(group)
                processed.update(group)
                max_steps_case = max(group, key=lambda x: len(
                    self.df[self.df['Id'] == x]['Test Step Description'].values[0].split()))
                optimized_cases.append(max_steps_case)

        unique_cases = set(self.df['Id']) - processed
        optimized_cases.extend(unique_cases)

        self.total_cases = len(self.df['Id'])
        self.optimized_cases = optimized_cases
        self.similar_groups = similar_groups

    def find_unique_test_cases(self, threshold=0.1):
        unique_cases = []
        for i, test_case_id in enumerate(self.cosine_similarity_df.index):
            similar = self.cosine_similarity_df[test_case_id][
                self.cosine_similarity_df[test_case_id] >= threshold].index.tolist()
            if len(similar) == 1:  # only the test case itself is similar
                unique_cases.append(test_case_id)

        self.unique_cases = unique_cases

        self.similar_groups = similar_groups
